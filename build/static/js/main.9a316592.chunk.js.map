{"version":3,"sources":["services/persons.js","App.js","serviceWorker.js","index.js"],"names":["baseUrl","services_persons","axios","get","then","response","data","newObject","post","id","delete","concat","Ilmoitus","_ref","errorMessage","successMessage","react_default","a","createElement","className","Numerot","_ref2","persons","removePerson","console","log","map","person","key","name","number","onClick","Lisaa","_ref3","handleNameChange","handleNumberChange","addPerson","onSubmit","value","onChange","type","App","_useState","useState","_useState2","Object","slicedToArray","setErrorMessage","_useState3","_useState4","setSuccessMessage","_useState5","_useState6","setPersons","_useState7","_useState8","setName","_useState9","_useState10","setNumber","_useState11","_useState12","searchFilter","setSearchFilter","useEffect","personService","filteredPersons","length","filter","p","toLowerCase","includes","App_Ilmoitus","event","target","App_Lisaa","preventDefault","find","s","personObject","copy","toConsumableArray","catch","error","setTimeout","App_Numerot","window","confirm","Boolean","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.9a316592.chunk.js","sourcesContent":["import axios from 'axios'\r\nconst baseUrl = '/api/persons'\r\n\r\nconst getAll = () => {\r\n    const request = axios.get(baseUrl)\r\n    return request.then(response => { return response.data })\r\n}\r\n\r\nconst create = newObject => {\r\n    const request = axios.post(baseUrl, newObject)\r\n    return request.then(response => { return response.data })\r\n}\r\n\r\nconst update = (id, newObject) => {\r\n    const request = axios.put(`${baseUrl}/${id}`, newObject)\r\n    return request.then(response => { return response.data })\r\n}\r\n\r\nconst remove = (id) => {\r\n    const request = axios.delete(`${baseUrl}/${id}`)\r\n    return request.then(response => { return response.data})\r\n}\r\n\r\nexport default { \r\n  getAll,\r\n  create,\r\n  update,\r\n  remove\r\n}","import React, { useState, useEffect } from \"react\";\r\nimport personService from \"./services/persons\";\r\nimport \"./index.css\";\r\n\r\nconst Ilmoitus = ({ errorMessage, successMessage }) => {\r\n    if (errorMessage === null && successMessage === null) {\r\n        return null;\r\n    }\r\n    if (errorMessage) {\r\n        return <div className=\"error\">{errorMessage}</div>;\r\n    } else {\r\n        return <div className=\"success\">{successMessage}</div>;\r\n    }\r\n};\r\n\r\nconst Numerot = ({ persons, removePerson }) => {\r\n    console.log(persons)\r\n    return persons.map(person => (\r\n        <li key={person.id}>\r\n            <p>\r\n                {person.name} : {person.number}\r\n                <button className=\"poista\" onClick={() => removePerson(person)}>\r\n                    poista\r\n                </button>\r\n            </p>\r\n        </li>\r\n    ));\r\n};\r\n\r\nconst Lisaa = ({\r\n    handleNameChange,\r\n    handleNumberChange,\r\n    addPerson,\r\n    name,\r\n    number\r\n}) => {\r\n    return (\r\n        <form onSubmit={addPerson}>\r\n            <div>\r\n                nimi: <input value={name} onChange={handleNameChange} />\r\n            </div>\r\n            <div className=\"lisaa\">\r\n                numero: <input value={number} onChange={handleNumberChange} />\r\n            </div>\r\n            <div>\r\n                <button type=\"submit\">lis채채</button>\r\n            </div>\r\n        </form>\r\n    );\r\n};\r\n\r\nconst App = () => {\r\n    const [errorMessage, setErrorMessage] = useState(null);\r\n    const [successMessage, setSuccessMessage] = useState(null);\r\n    const [persons, setPersons] = useState([]);\r\n    const [name, setName] = useState(\"\");\r\n    const [number, setNumber] = useState(\"\");\r\n    const [searchFilter, setSearchFilter] = useState(\"\");\r\n\r\n    const handleNameChange = event => setName(event.target.value);\r\n    const handleNumberChange = event => setNumber(event.target.value);\r\n    const handleFilter = event => setSearchFilter(event.target.value);\r\n\r\n    useEffect(() => {\r\n        personService.getAll().then(data => {\r\n            setPersons(data);\r\n        });\r\n    }, []);\r\n\r\n    const removePerson = person => {\r\n        if (\r\n            window.confirm(\r\n                \"Poistetaanko \" +\r\n                    person.name +\r\n                    \" jonka id on \" +\r\n                    person.id +\r\n                    \" ?\"\r\n            )\r\n        )\r\n            personService\r\n                .remove(person.id)\r\n                .then(response => {\r\n                    setSuccessMessage(\r\n                        `${person.name} poistettiin onnistuneesti.`\r\n                    );\r\n                    setPersons(persons.filter(p => p.id !== person.id));\r\n                })\r\n                .catch(error => {\r\n                    setErrorMessage(`${person.name} virhe. ${error}`);\r\n                    setTimeout(() => {\r\n                        errorMessage(null);\r\n                    }, 5000);\r\n                });\r\n    };\r\n\r\n    const addPerson = event => {\r\n        event.preventDefault();\r\n        const findName = filteredPersons.find(s => s.name === name);\r\n        if (findName) {\r\n            /*\r\n            const personId = findName.id;\r\n            if (\r\n                window.confirm(\r\n                    name +\r\n                        \" on jo luettelossa, korvataanko vanha numero uudella?\"\r\n                )\r\n            ) {\r\n                const personObject = {\r\n                    id: personId,\r\n                    name: name,\r\n                    number: number\r\n                };\r\n                personService\r\n                    .update(personId, personObject)\r\n                    .then(n => {\r\n                        setSuccessMessage(`${name} n p채ivitys onnistui!`);\r\n                        const copy = [...persons];\r\n                        copy.splice(personId - 1, 1, n);\r\n                        setPersons([]); // jos suoraan tekee alemman, dom ei p채ivity\r\n                        setPersons(copy);\r\n                        setName(\"\");\r\n                        setNumber(\"\");\r\n                    })\r\n                    .catch(error => {\r\n                        setErrorMessage(`${name} ...virhe? ${error}`);\r\n                        setTimeout(() => {\r\n                            setErrorMessage(null);\r\n                        }, 5000);\r\n                    });\r\n            } */\r\n        } else {\r\n            const personObject = {\r\n                name,\r\n                number\r\n            };\r\n            personService\r\n                .create(personObject)\r\n                .then(id => {\r\n                    personObject.id = id;\r\n                    setSuccessMessage(`Lis채ttiin ${name}`);\r\n                    let copy = [...persons.concat(personObject)];\r\n                    setPersons(copy);\r\n                    setName(\"\");\r\n                    setNumber(\"\");\r\n                })\r\n                .catch(error => {\r\n                    console.log(error);\r\n                    setErrorMessage(`${name} virhe. ${error}`);\r\n                    setTimeout(() => {\r\n                        setErrorMessage(null);\r\n                    }, 5000);\r\n                });\r\n        }\r\n    };\r\n\r\n    const filteredPersons =\r\n        searchFilter.length === 0\r\n            ? persons\r\n            : persons.filter(p =>\r\n                  p.name.toLowerCase().includes(searchFilter.toLowerCase())\r\n              );\r\n\r\n    return (\r\n        <div>\r\n            <h1>Puhelinluettelo</h1>\r\n            <Ilmoitus\r\n                errorMessage={errorMessage}\r\n                successMessage={successMessage}\r\n            />\r\n            <h3>Rajaa n채ytett채vi채</h3>\r\n            <input value={searchFilter} onChange={handleFilter} />\r\n\r\n            <h3>Lis채채 uusi</h3>\r\n            <Lisaa\r\n                handleNameChange={handleNameChange}\r\n                handleNumberChange={handleNumberChange}\r\n                addPerson={addPerson}\r\n                name={name}\r\n                number={number}\r\n            />\r\n\r\n            <h3>Numerot</h3>\r\n            <Numerot persons={filteredPersons} removePerson={removePerson} />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}